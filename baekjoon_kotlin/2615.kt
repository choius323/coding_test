/*

2615번 - 오목
https://www.acmicpc.net/problem/2615
분류 : 구현, 브루트포스 알고리즘

배열의 크기를 21x21로 만들어서 네 방향 모두 0이 들어가있는 공간을 만들어 조건문을 만들기 편하게 했다.
dp에는 각 칸에서 가로, 세로, 대각선 2종이 몇개가 연속으로 나왔는지 저장했다.
오목이 성공했을 때 가장 왼쪽 위의 좌표를 출력해야 되기 때문에 출력을 쉽게 하기 위해 오른쪽 아래부터 탐색했다.
우상향 대각선 모양(/)만 출력할 때 조심하면 된다.

*/

fun main() = java.io.StreamTokenizer(System.`in`.bufferedReader()).run {
    val r = { nextToken();nval.toInt() }
    val table = Array(21) { IntArray(21) }
    for (y in 1..19) for (x in 1..19) table[y][x] = r()
    val dp = Array(21) { Array(21) { IntArray(4) { 1 } } } // 가로, 세로, 대각선(/), 대각선(\)
    for (y in 19 downTo 1) for (x in 19 downTo 1) {
        if (table[y][x] != 0) {
            if (table[y][x] == table[y][x + 1]) dp[y][x][0] += dp[y][x + 1][0]
            if (table[y][x] == table[y + 1][x]) dp[y][x][1] += dp[y + 1][x][1]
            if (table[y][x] == table[y + 1][x - 1]) dp[y][x][2] += dp[y + 1][x - 1][2]
            if (table[y][x] == table[y + 1][x + 1]) dp[y][x][3] += dp[y + 1][x + 1][3]
        }
        if ((dp[y][x][0] == 5 && table[y][x] != table[y][x - 1])
            || (dp[y][x][1] == 5 && table[y][x] != table[y - 1][x])
            || (dp[y][x][3] == 5 && table[y][x] != table[y - 1][x - 1])
        ) {
            return print("${table[y][x]}\n$y $x")
        } else if (dp[y][x][2] == 5 && table[y][x] != table[y - 1][x + 1]) {
            return print("${table[y][x]}\n${y + 4} ${x - 4}")
        }
    }
    print(0)
}

/*
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 1 2 0 0 2 2 2 1 0 0 0 0 0 0 0 0 0 0
0 0 1 2 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0
0 0 0 1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 1 2 2 0 0 0 0 0 0 0 0 0 0 0 0
0 0 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 2 1 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

1
3 2



2 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1
1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
2 1 2 0 0 2 2 2 1 0 0 0 0 0 0 0 0 0 0
1 0 1 2 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0
1 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 2 2 0 0 0 0 0 0 0 0 0 0 0 0
0 0 1 1 0 1 2 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 2 1 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 0 0
0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 0 0 0
1 0 0 1 0 1 1 0 1 0 1 0 0 0 0 0 0 0 0
1 0 0 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 1
1 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0
1 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1
1 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1
1 2 2 1 2 2 0 0 1 0 0 0 0 0 1 0 1 1 1



0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 2 0 0 2 2 2 1 0 0 0 0 0 0 0 0 0 0
0 0 0 2 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0
0 0 0 0 2 0 0 1 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 2 1 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 1 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 1 0 2 1 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

1
8 5
*/